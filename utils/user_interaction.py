"""
User interaction utilities for DeepResearch system.
Provides functions for user confirmation, feedback collection, and interactive modifications.
"""

import json
from typing import Dict, Any, Optional, List, Tuple
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.prompt import Prompt, Confirm
from rich.markdown import Markdown
from rich.syntax import Syntax

from utils.json_utils import ResearchOutline, Section, SubSection
from utils.logger import LoggerMixin


class UserInteraction(LoggerMixin):
    """
    Handles user interaction for research workflow.
    Provides confirmation, feedback collection, and modification capabilities.
    """
    
    def __init__(self):
        """Initialize user interaction handler."""
        self.console = Console()
    
    def display_outline(self, outline: ResearchOutline) -> None:
        """
        Display research outline in a formatted way.
        
        Args:
            outline: Research outline to display
        """
        # Create main panel
        title_panel = Panel(
            f"[bold blue]{outline.title}[/bold blue]",
            title="üìã Á†îÁ©∂ÊèêÁ∫≤",
            border_style="blue"
        )
        self.console.print(title_panel)
        
        # Display abstract if available
        if outline.abstract:
            abstract_panel = Panel(
                outline.abstract,
                title="üìù ÊëòË¶Å",
                border_style="green"
            )
            self.console.print(abstract_panel)
        
        # Display sections
        for i, section in enumerate(outline.sections, 1):
            section_content = f"[bold]{section.title}[/bold]\n"
            if section.description:
                section_content += f"{section.description}\n"
            
            # Add subsections
            if section.subsections:
                section_content += "\nÂ≠êÁ´†ËäÇ:\n"
                for j, subsection in enumerate(section.subsections, 1):
                    section_content += f"  {i}.{j} {subsection.title}\n"
                    if subsection.description:
                        section_content += f"      {subsection.description}\n"
            
            # Add keywords
            if section.keywords:
                section_content += f"\nÂÖ≥ÈîÆËØç: {', '.join(section.keywords)}"
            
            section_panel = Panel(
                section_content,
                title=f"üìñ Á¨¨{i}Á´†",
                border_style="cyan"
            )
            self.console.print(section_panel)
        
        # Display summary
        summary_content = f"""
ÊÄªÁ´†ËäÇÊï∞: {len(outline.sections)}
È¢Ñ‰º∞ÊÄªÂ≠óÊï∞: {outline.estimated_total_length:,}
Á†îÁ©∂ËØ≠Ë®Ä: {outline.language}
        """
        
        if outline.keywords:
            summary_content += f"ÊÄª‰ΩìÂÖ≥ÈîÆËØç: {', '.join(outline.keywords)}"
        
        summary_panel = Panel(
            summary_content.strip(),
            title="üìä ÊèêÁ∫≤ÊëòË¶Å",
            border_style="yellow"
        )
        self.console.print(summary_panel)
    
    def get_outline_confirmation(self, outline: ResearchOutline) -> Tuple[bool, Optional[str]]:
        """
        Get user confirmation for research outline.
        
        Args:
            outline: Research outline to confirm
        
        Returns:
            Tuple of (approved, feedback)
        """
        self.console.print("\n" + "="*60)
        self.console.print("üìã ËØ∑Á°ÆËÆ§Á†îÁ©∂ÊèêÁ∫≤", style="bold blue")
        self.console.print("="*60)
        
        # Display the outline
        self.display_outline(outline)
        
        # Get user confirmation
        self.console.print("\nËØ∑ÈÄâÊã©ÊÇ®ÁöÑÊìç‰Ωú:", style="bold yellow")
        self.console.print("1. ‚úÖ Á°ÆËÆ§ÊèêÁ∫≤ÔºåÁªßÁª≠Á†îÁ©∂")
        self.console.print("2. üìù Êèê‰æõ‰øÆÊîπÊÑèËßÅ")
        self.console.print("3. üîÑ ÈáçÊñ∞ÁîüÊàêÊèêÁ∫≤")
        
        while True:
            choice = Prompt.ask("ËØ∑ËæìÂÖ•ÈÄâÊã© (1-3)", choices=["1", "2", "3"], default="1")
            
            if choice == "1":
                return True, None
            elif choice == "2":
                feedback = Prompt.ask("ËØ∑ÊèèËø∞ÊÇ®Â∏åÊúõÂ¶Ç‰Ωï‰øÆÊîπÊèêÁ∫≤")
                if feedback.strip():
                    return False, feedback
                else:
                    self.console.print("‚ùå ËØ∑Êèê‰æõÂÖ∑‰ΩìÁöÑ‰øÆÊîπÊÑèËßÅ", style="bold red")
                    continue
            elif choice == "3":
                return False, None
    
    def get_modification_choice(self, item_type: str = "ÊèêÁ∫≤") -> str:
        """
        Get user choice for modification method.
        
        Args:
            item_type: Type of item being modified
        
        Returns:
            User's choice
        """
        self.console.print(f"\nüîß Â¶Ç‰Ωï‰øÆÊîπ{item_type}?", style="bold blue")
        self.console.print("1. ü§ñ Ëá™Âä®ÊîπËøõ - ËÆ©AIÊ†πÊçÆÊÇ®ÁöÑÂèçÈ¶àËá™Âä®‰ºòÂåñ")
        self.console.print("2. ‚úèÔ∏è ÊâãÂä®ÁºñËæë - Áõ¥Êé•ÁºñËæëÂÜÖÂÆπ")
        self.console.print("3. üîÅ ÈáçÊñ∞ÁîüÊàê - ÂÆåÂÖ®ÈáçÊñ∞ÁîüÊàê")
        self.console.print("4. ‚è≠Ô∏è ÁªßÁª≠ÊâßË°å - ‰ΩøÁî®ÂΩìÂâçÁâàÊú¨ÁªßÁª≠")
        
        choice_map = {
            "1": "Ëá™Âä®ÊîπËøõ",
            "2": "ÊâãÂä®ÁºñËæë", 
            "3": "ÈáçÊñ∞ÁîüÊàê",
            "4": "ÁªßÁª≠ÊâßË°å"
        }
        
        choice = Prompt.ask("ËØ∑ÈÄâÊã©‰øÆÊîπÊñπÂºè (1-4)", choices=["1", "2", "3", "4"], default="1")
        return choice_map[choice]
    
    def get_manual_outline_edit(self, outline: ResearchOutline) -> Optional[ResearchOutline]:
        """
        Allow user to manually edit outline.
        
        Args:
            outline: Current outline
        
        Returns:
            Modified outline or None if cancelled
        """
        self.console.print("\n‚úèÔ∏è ÊâãÂä®ÁºñËæëÊ®°Âºè", style="bold blue")
        self.console.print("ÊÇ®ÂèØ‰ª•‰øÆÊîπ‰ª•‰∏ãÂÜÖÂÆπ:")
        
        # Convert outline to editable format
        outline_dict = outline.dict()
        
        # Edit title
        new_title = Prompt.ask("Á†îÁ©∂Ê†áÈ¢ò", default=outline.title)
        if new_title != outline.title:
            outline_dict["title"] = new_title
        
        # Edit abstract
        if outline.abstract:
            new_abstract = Prompt.ask("Á†îÁ©∂ÊëòË¶Å", default=outline.abstract)
            if new_abstract != outline.abstract:
                outline_dict["abstract"] = new_abstract
        
        # Edit sections (simplified)
        self.console.print("\nüìñ Á´†ËäÇÁºñËæë (ËæìÂÖ•Á©∫ÁôΩË∑≥Ëøá):")
        for i, section in enumerate(outline.sections):
            new_section_title = Prompt.ask(f"Á¨¨{i+1}Á´†Ê†áÈ¢ò", default=section.title)
            if new_section_title != section.title:
                outline_dict["sections"][i]["title"] = new_section_title
            
            if section.description:
                new_description = Prompt.ask(f"Á¨¨{i+1}Á´†ÊèèËø∞", default=section.description)
                if new_description != section.description:
                    outline_dict["sections"][i]["description"] = new_description
        
        try:
            # Create new outline from modified data
            modified_outline = ResearchOutline(**outline_dict)
            self.console.print("‚úÖ ÊèêÁ∫≤‰øÆÊîπÂÆåÊàê", style="bold green")
            return modified_outline
        except Exception as e:
            self.console.print(f"‚ùå ÊèêÁ∫≤‰øÆÊîπÂ§±Ë¥•: {e}", style="bold red")
            return None
    
    def get_research_preferences(self) -> Dict[str, Any]:
        """
        Get user research preferences.
        
        Returns:
            Dictionary of user preferences
        """
        self.console.print("\nüéØ Á†îÁ©∂ÂÅèÂ•ΩËÆæÁΩÆ", style="bold blue")
        self.console.print("ËØ∑ËÆæÁΩÆÊÇ®ÁöÑÁ†îÁ©∂ÂÅèÂ•Ω:")
        
        preferences = {}
        
        # Research depth
        self.console.print("\nüìä Á†îÁ©∂Ê∑±Â∫¶:")
        self.console.print("1. Âü∫Á°Ä - Âø´ÈÄüÊ¶ÇËßàÔºå3-4‰∏™Á´†ËäÇ")
        self.console.print("2. Ê†áÂáÜ - Âπ≥Ë°°Ê∑±Â∫¶Ôºå4-6‰∏™Á´†ËäÇ") 
        self.console.print("3. Ê∑±ÂÖ• - ÂÖ®Èù¢ÂàÜÊûêÔºå6-8‰∏™Á´†ËäÇ")
        
        depth_choice = Prompt.ask("ÈÄâÊã©Á†îÁ©∂Ê∑±Â∫¶ (1-3)", choices=["1", "2", "3"], default="2")
        depth_map = {"1": "basic", "2": "standard", "3": "comprehensive"}
        preferences["research_depth"] = depth_map[depth_choice]
        
        # Output format preference
        self.console.print("\nüìÑ ËæìÂá∫Ê†ºÂºèÂÅèÂ•Ω:")
        self.console.print("1. Â≠¶ÊúØÈ£éÊ†º - Ê≠£Âºè„ÄÅÂºïÁî®‰∏∞ÂØå")
        self.console.print("2. ÂïÜ‰∏öÈ£éÊ†º - ÂÆûÁî®„ÄÅÈáçÁÇπÁ™ÅÂá∫")
        self.console.print("3. ÈÄö‰øóÈ£éÊ†º - ÊòìÊáÇ„ÄÅÁîüÂä®ÊúâË∂£")
        
        style_choice = Prompt.ask("ÈÄâÊã©ËæìÂá∫È£éÊ†º (1-3)", choices=["1", "2", "3"], default="2")
        style_map = {"1": "academic", "2": "business", "3": "popular"}
        preferences["output_style"] = style_map[style_choice]
        
        # Include search results
        include_search = Confirm.ask("ÊòØÂê¶ÂåÖÂê´ÊêúÁ¥¢ÁªìÊûúÂíåÂºïÁî®?", default=True)
        preferences["include_search"] = include_search
        
        # Language preference
        language = Prompt.ask("Á†îÁ©∂ËØ≠Ë®Ä", default="zh-CN", choices=["zh-CN", "en-US"])
        preferences["language"] = language
        
        self.console.print("\n‚úÖ ÂÅèÂ•ΩËÆæÁΩÆÂÆåÊàê!", style="bold green")
        return preferences
    
    def show_progress_update(self, message: str, status: str = "info") -> None:
        """
        Show progress update to user.
        
        Args:
            message: Progress message
            status: Status type (info, success, warning, error)
        """
        style_map = {
            "info": "blue",
            "success": "green", 
            "warning": "yellow",
            "error": "red"
        }
        
        icon_map = {
            "info": "‚ÑπÔ∏è",
            "success": "‚úÖ",
            "warning": "‚ö†Ô∏è", 
            "error": "‚ùå"
        }
        
        style = style_map.get(status, "blue")
        icon = icon_map.get(status, "‚ÑπÔ∏è")
        
        self.console.print(f"{icon} {message}", style=f"bold {style}")
    
    def display_success(self, message: str) -> None:
        """Display success message."""
        success_panel = Panel(
            f"[bold green]{message}[/bold green]",
            title="üéâ ÊàêÂäü",
            border_style="green"
        )
        self.console.print(success_panel)
    
    def display_error(self, message: str) -> None:
        """Display error message."""
        error_panel = Panel(
            f"[bold red]{message}[/bold red]",
            title="‚ùå ÈîôËØØ",
            border_style="red"
        )
        self.console.print(error_panel)
    
    def display_warning(self, message: str) -> None:
        """Display warning message."""
        warning_panel = Panel(
            f"[bold yellow]{message}[/bold yellow]",
            title="‚ö†Ô∏è Ë≠¶Âëä",
            border_style="yellow"
        )
        self.console.print(warning_panel)


# Global instance
_user_interaction = None


def get_user_interaction() -> UserInteraction:
    """
    Get global user interaction instance.
    
    Returns:
        UserInteraction instance
    """
    global _user_interaction
    if _user_interaction is None:
        _user_interaction = UserInteraction()
    return _user_interaction 